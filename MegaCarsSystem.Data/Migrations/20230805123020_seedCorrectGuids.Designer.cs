// <auto-generated />
using System;
using MegaCarsSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MegaCarsSystem.Data.Migrations
{
    [DbContext(typeof(MegaCarsDbContext))]
    [Migration("20230805123020_seedCorrectGuids")]
    partial class seedCorrectGuids
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MegaCarsSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasDefaultValue("TestF");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasDefaultValue("TestL");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ShoppingCartId")
                        .IsUnique()
                        .HasFilter("[ShoppingCartId] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5628be-a8ca-4cf0-bc0d-c441e6aa0c6e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ad9267e-ebfa-49a9-b3a7-115df86978a4",
                            Email = "user@user.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            LastName = "Guest_Test",
                            LockoutEnabled = false,
                            NormalizedEmail = "user@user.com",
                            NormalizedUserName = "user@user.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJiij4YEipau75/IkMyrfx+bg76cIvdlqBc4PC4DMnzy2RK40s6fNhcue6KolYNU0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de246e87-5cb3-4858-8840-bb81dfb0da42",
                            ShoppingCartId = new Guid("88856b35-f932-4a23-9baf-2a8974418b22"),
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = new Guid("993dc891-f1ee-4b53-984d-3a019f294bfd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "105df291-9924-4d21-a33a-405fed8c5d42",
                            Email = "dealer@dealer.com",
                            EmailConfirmed = false,
                            FirstName = "Dealer",
                            LastName = "DeIsHere_Test",
                            LockoutEnabled = false,
                            NormalizedEmail = "dealer@dealer.com",
                            NormalizedUserName = "dealer@dealer.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEN7kfnl4Op6NoGkOR5Y26WwdDFvtqQYNfnfdX78yj6hT32YVsLdG12qURhHvqOA5WQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c149317-791d-4144-8bfd-489ca8e4ab03",
                            ShoppingCartId = new Guid("61be485b-f019-4fd6-9c43-07f5aa896895"),
                            TwoFactorEnabled = false,
                            UserName = "dealer@dealer.com"
                        },
                        new
                        {
                            Id = new Guid("bcbd7654-ab17-4621-b75b-fc43ea4449db"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46ac5702-2220-4daf-954a-451d207903b1",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "AdIsHere_Test",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@admin.com",
                            NormalizedUserName = "admin@admin.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEOLclY5hQspOqoWmPw7SZmeXItqEQ40RPyvL+lTPIvvEKtp09yNG2e2zUqwhaaACZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e12c2544-be54-4931-8a11-533bd1213225",
                            ShoppingCartId = new Guid("1bca46f0-2eb4-43c7-8a76-7b006ceb109a"),
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("GearboxId")
                        .HasColumnType("int");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DealerId");

                    b.HasIndex("EngineId");

                    b.HasIndex("GearboxId");

                    b.HasIndex("RenterId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0f2c170-7aa4-449a-bb44-58888eae5178"),
                            Address = "Boyana Neighbourhood, Sofia, Bulgaria",
                            Brand = "McLaren",
                            CategoryId = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DealerId = new Guid("4fd9d7ca-37c2-411e-8a03-b978fbb1c5f3"),
                            Description = "This is a sports car and is recommended to be driven carefully.",
                            EngineId = 2,
                            GearboxId = 2,
                            Horsepower = 560,
                            ImageUrl = "https://edge.pxcrush.net/cars/dealer/dro0hrehxv0n0250f55sf7nqy.jpg?pxc_expires=20231101025101&pxc_clear=1&pxc_signature=2e0f693b59a609c1f0f77e21ed5fbfed",
                            IsActive = false,
                            Model = "720S",
                            PricePerDay = 1500.00m,
                            YearOfManufacture = 2016
                        },
                        new
                        {
                            Id = new Guid("9944ed88-39e6-4c93-b830-1123d605ad30"),
                            Address = "Boyana Neighbourhood, Sofia, Bulgaria",
                            Brand = "Toyota",
                            CategoryId = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DealerId = new Guid("4fd9d7ca-37c2-411e-8a03-b978fbb1c5f3"),
                            Description = "The car is a sports coupe type and is convenient for maneuvering in urban conditions.",
                            EngineId = 1,
                            GearboxId = 1,
                            Horsepower = 430,
                            ImageUrl = "https://performancedrive.com.au/wp-content/uploads/2020/02/2020-Toyota-GR-Supra-GT-scaled.jpg",
                            IsActive = false,
                            Model = "Supra",
                            PricePerDay = 900.00m,
                            YearOfManufacture = 2020
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(27)
                        .HasColumnType("nvarchar(27)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hatchback"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Convertible"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Station Wagon"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sports Car"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Luxury Car"
                        },
                        new
                        {
                            Id = 8,
                            Name = "SUV (Sport Utility Vehicle)"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Minivan"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pickup Truck"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Off-Road"
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Dealer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Dealers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fd9d7ca-37c2-411e-8a03-b978fbb1c5f3"),
                            PhoneNumber = "+359888777666",
                            UserId = new Guid("993dc891-f1ee-4b53-984d-3a019f294bfd")
                        },
                        new
                        {
                            Id = new Guid("d08e602f-3c3f-4391-aaf6-b4867a639c13"),
                            PhoneNumber = "+359333222111",
                            UserId = new Guid("bcbd7654-ab17-4621-b75b-fc43ea4449db")
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Engines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gasoline"
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Gearbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.ToTable("Gearboxes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manual"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Automatic"
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShopCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShopCartId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b021055-52f6-480d-9a8d-361925b21212"),
                            Description = "Мetal key holder for your keys.",
                            Image = "https://i.etsystatic.com/13582943/r/il/2f99a2/1700229685/il_fullxfull.1700229685_ooj3.jpg",
                            Name = "Keychain Turbine",
                            Price = 5.00m
                        },
                        new
                        {
                            Id = new Guid("2c886ce2-11e7-4903-8e28-e9d3f2edaa69"),
                            Description = "Black T-shirt with great quality.",
                            Image = "https://images-na.ssl-images-amazon.com/images/I/61oFHwCIKrL._SLDPMOBCAROUSELAUTOCROP288221_MCnd_AC_SR462,693_.jpg",
                            Name = "T-shirt Supercar",
                            Price = 18.00m
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.ShopCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ShopCarts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88856b35-f932-4a23-9baf-2a8974418b22"),
                            UserId = new Guid("2c5628be-a8ca-4cf0-bc0d-c441e6aa0c6e")
                        },
                        new
                        {
                            Id = new Guid("61be485b-f019-4fd6-9c43-07f5aa896895"),
                            UserId = new Guid("993dc891-f1ee-4b53-984d-3a019f294bfd")
                        },
                        new
                        {
                            Id = new Guid("1bca46f0-2eb4-43c7-8a76-7b006ceb109a"),
                            UserId = new Guid("bcbd7654-ab17-4621-b75b-fc43ea4449db")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.ShopCart", "ShoppingCart")
                        .WithOne("User")
                        .HasForeignKey("MegaCarsSystem.Data.Models.ApplicationUser", "ShoppingCartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Car", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MegaCarsSystem.Data.Models.Dealer", "Dealer")
                        .WithMany("OwnedCars")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MegaCarsSystem.Data.Models.Engine", "Engine")
                        .WithMany("Cars")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MegaCarsSystem.Data.Models.Gearbox", "Gearbox")
                        .WithMany("Cars")
                        .HasForeignKey("GearboxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MegaCarsSystem.Data.Models.ApplicationUser", "Renter")
                        .WithMany("RentedCars")
                        .HasForeignKey("RenterId");

                    b.Navigation("Category");

                    b.Navigation("Dealer");

                    b.Navigation("Engine");

                    b.Navigation("Gearbox");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Dealer", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Item", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.ShopCart", "ShopCart")
                        .WithMany("Items")
                        .HasForeignKey("ShopCartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ShopCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MegaCarsSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("RentedCars");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Category", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Dealer", b =>
                {
                    b.Navigation("OwnedCars");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Engine", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Gearbox", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.ShopCart", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
