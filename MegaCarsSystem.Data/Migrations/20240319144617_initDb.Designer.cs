// <auto-generated />
using System;
using MegaCarsSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MegaCarsSystem.Data.Migrations
{
    [DbContext(typeof(MegaCarsDbContext))]
    [Migration("20240319144617_initDb")]
    partial class initDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MegaCarsSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasDefaultValue("TestF");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasDefaultValue("TestL");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ShoppingCartId")
                        .IsUnique()
                        .HasFilter("[ShoppingCartId] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5628be-a8ca-4cf0-bc0d-c441e6aa0c6e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1119391f-5275-4ee7-9200-a2a3c5c237c7",
                            Email = "user@user.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            LastName = "Guest_Test",
                            LockoutEnabled = false,
                            NormalizedEmail = "user@user.com",
                            NormalizedUserName = "user@user.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEKurJcEqzZJB4eqd5m0B78h/mQMvvHOqxfIB3vkYSteevjl01w1BJxbRlQpd8BPhAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5ed3ee8-2361-40cd-a893-5c41cbf1cacf",
                            ShoppingCartId = new Guid("88856b35-f932-4a23-9baf-2a8974418b22"),
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = new Guid("993dc891-f1ee-4b53-984d-3a019f294bfd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57c4df42-e654-4f36-bcfd-bd03c27ddee6",
                            Email = "dealer@dealer.com",
                            EmailConfirmed = false,
                            FirstName = "Dealer",
                            LastName = "DeIsHere_Test",
                            LockoutEnabled = false,
                            NormalizedEmail = "dealer@dealer.com",
                            NormalizedUserName = "dealer@dealer.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEGafbK41oAIimkU+iaE7THLfRaTjnrerccfWevC6uBlO25p07pK33d5hQZtEuqfpKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f539083-2c1c-41b6-a199-aef430628602",
                            ShoppingCartId = new Guid("61be485b-f019-4fd6-9c43-07f5aa896895"),
                            TwoFactorEnabled = false,
                            UserName = "dealer@dealer.com"
                        },
                        new
                        {
                            Id = new Guid("bcbd7654-ab17-4621-b75b-fc43ea4449db"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b409c1a7-aa92-4c47-a99f-7ed9c25c326a",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "AdIsHere_Test",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@admin.com",
                            NormalizedUserName = "admin@admin.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEDQpp/IUeh568RN+OshAYPNn7q5kZuZuOL7n7zZyB1o7W5pC6X6pqnaNn0TCwHNVcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8528768b-8add-4420-8081-6889e83b0093",
                            ShoppingCartId = new Guid("1bca46f0-2eb4-43c7-8a76-7b006ceb109a"),
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("GearboxId")
                        .HasColumnType("int");

                    b.Property<int>("Horsepower")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DealerId");

                    b.HasIndex("EngineId");

                    b.HasIndex("GearboxId");

                    b.HasIndex("RenterId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9b5a788-47f3-4280-8376-fb5fa40a8e14"),
                            Address = "ul. Ivan Vazov N3, Sofia, Bulgaria",
                            Brand = "Nissan",
                            CategoryId = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DealerId = new Guid("4fd9d7ca-37c2-411e-8a03-b978fbb1c5f3"),
                            Description = "The 2020 GT-R's standard twin-turbo 3.8-liter V-6 makes a mighty 565 horsepower. It hooks up to a six-speed automatic transmission and all-wheel drive that conspire to put all that power to the pavement. At our test track, the GT-R launched itself from zero to 60 mph in a mere 2.9 seconds.",
                            EngineId = 2,
                            GearboxId = 2,
                            Horsepower = 565,
                            ImageUrl = "https://cdn.motor1.com/images/mgl/1MlwW/s1/2020-nissan-gt-r-nismo-review.jpg",
                            IsActive = false,
                            Model = "GT-R",
                            PricePerDay = 800.00m,
                            YearOfManufacture = 2020
                        },
                        new
                        {
                            Id = new Guid("7c6231d0-3b98-4353-ad5b-730e67bdac6d"),
                            Address = "ul. Ivan Vazov N3, Sofia, Bulgaria",
                            Brand = "Aston Martin",
                            CategoryId = 7,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DealerId = new Guid("4fd9d7ca-37c2-411e-8a03-b978fbb1c5f3"),
                            Description = "The Vantage is a rear wheel drive 2 door with 2 seats, powered by a 4.0L TWIN TURBO V8 engine that has 375 kW of power (at 6000 rpm) and 685 Nm of torque (at 2000 rpm) via an Eight-speed Automatic.",
                            EngineId = 2,
                            GearboxId = 2,
                            Horsepower = 503,
                            ImageUrl = "https://www.autocar.co.uk/sites/autocar.co.uk/files/1-aston-martin-vantage-2018-review-hero-front.jpg",
                            IsActive = false,
                            Model = "Vantage",
                            PricePerDay = 1100.00m,
                            YearOfManufacture = 2019
                        },
                        new
                        {
                            Id = new Guid("5623ed1b-2707-4905-a78e-40a1f143b938"),
                            Address = "ul. Ivan Vazov N3, Sofia, Bulgaria",
                            Brand = "BMW",
                            CategoryId = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DealerId = new Guid("4fd9d7ca-37c2-411e-8a03-b978fbb1c5f3"),
                            Description = "The M5 is powered by a 4.4-liter twin-turbo V-8 with 600 hp and 553 lb-ft of torque. M5 Competition models get a power bump to 617 hp. EPA fuel economy ratings are 15/21 mpg city/highway with the standard eight-speed automatic transmission. We've tested an M5 reaching 60 mph in as quick as 3.0 seconds.",
                            EngineId = 2,
                            GearboxId = 2,
                            Horsepower = 600,
                            ImageUrl = "https://www.thedrive.com/content/2021/09/IMG_3314.jpeg?quality=85&crop=16%3A9&auto=webp&optimize=high&quality=70&width=1440",
                            IsActive = false,
                            Model = "M5 Competition",
                            PricePerDay = 1250.00m,
                            YearOfManufacture = 2021
                        },
                        new
                        {
                            Id = new Guid("b4fe3974-1793-446b-b2f0-e8d07b0be6b6"),
                            Address = "ul. Ivan Vazov N3, Sofia, Bulgaria",
                            Brand = "Audi",
                            CategoryId = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DealerId = new Guid("4fd9d7ca-37c2-411e-8a03-b978fbb1c5f3"),
                            Description = "The 2022 Audi RS6 Avant delivers a powerful performance with 591 horsepower, 590 lb-ft of torque, and only needs 3.5 seconds to go from 0-60 mph. The performance continues with quattro® sport rear wheel differential, RS-tuned air suspension, and ceramic brakes.",
                            EngineId = 2,
                            GearboxId = 2,
                            Horsepower = 591,
                            ImageUrl = "https://web2.wheelz.me/wp-content/uploads/2021/11/ABT_RS6-S_red_HR22_23.jpg",
                            IsActive = false,
                            Model = "RS6 ",
                            PricePerDay = 760.00m,
                            YearOfManufacture = 2022
                        },
                        new
                        {
                            Id = new Guid("9824c3a6-b1d1-48a4-8b46-3526b1fde9c5"),
                            Address = "ul. Ivan Vazov N3, Sofia, Bulgaria",
                            Brand = "Mercedes",
                            CategoryId = 11,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DealerId = new Guid("4fd9d7ca-37c2-411e-8a03-b978fbb1c5f3"),
                            Description = "The high-performance AMG G63 is powered by a twin-turbo 5.5L V8 that makes 563 horsepower, making the big off-roader almost unnaturally quick. The AMG G65 is powered by a 6.0L twin-turbo V12 that produces 621 horsepower and 738 lb-feet of torque. All three engine options are mated to a 7-speed automatic transmission.",
                            EngineId = 1,
                            GearboxId = 2,
                            Horsepower = 563,
                            ImageUrl = "https://assets.autobuzz.my/wp-content/uploads/2018/11/13210055/2018-Mercedes-AMG-G-63-Launched-in-Malaysia-29.jpg",
                            IsActive = false,
                            Model = "AMG G-63",
                            PricePerDay = 1490.00m,
                            YearOfManufacture = 2018
                        },
                        new
                        {
                            Id = new Guid("1a0606ad-3512-4c97-811f-5c41a0b441d2"),
                            Address = "ul. Ivan Vazov N3, Sofia, Bulgaria",
                            Brand = "Bentley",
                            CategoryId = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DealerId = new Guid("4fd9d7ca-37c2-411e-8a03-b978fbb1c5f3"),
                            Description = "The Continental measures 1405mm (55.3 inches) in height, 4850mm (190.9 inches) in length, 1966mm (77.4 inches) in width with a 2851mm (112.2 inches) wheelbase that brings about a total of 2244kg (4947.2 lbs) of unladen weight. The Continental GT comes standard with 265/40 ZR21 front tyres and 305/35 ZR21 rear tyres.",
                            EngineId = 2,
                            GearboxId = 2,
                            Horsepower = 659,
                            ImageUrl = "https://cdn.carbuzz.com/gallery-images/840x560/538000/900/538901.jpg",
                            IsActive = false,
                            Model = "Continental GT",
                            PricePerDay = 1230.00m,
                            YearOfManufacture = 2021
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(27)
                        .HasColumnType("nvarchar(27)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hatchback"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Convertible"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Station Wagon"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sports Car"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Luxury Car"
                        },
                        new
                        {
                            Id = 8,
                            Name = "SUV (Sport Utility Vehicle)"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Minivan"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pickup Truck"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Off-Road"
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Dealer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Dealers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fd9d7ca-37c2-411e-8a03-b978fbb1c5f3"),
                            PhoneNumber = "+359888777666",
                            UserId = new Guid("993dc891-f1ee-4b53-984d-3a019f294bfd")
                        },
                        new
                        {
                            Id = new Guid("d08e602f-3c3f-4391-aaf6-b4867a639c13"),
                            PhoneNumber = "+359333222111",
                            UserId = new Guid("bcbd7654-ab17-4621-b75b-fc43ea4449db")
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Engines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gasoline"
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Gearbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.ToTable("Gearboxes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manual"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Automatic"
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShopCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShopCartId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalPriceStrUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0684bea3-31b8-4f63-9ed3-f3cad83f396b"),
                            Description = "Мetal key holder for your keys.",
                            Image = "https://i.etsystatic.com/13582943/r/il/2f99a2/1700229685/il_fullxfull.1700229685_ooj3.jpg",
                            Name = "Keychain Turbine",
                            Price = 5.99m
                        },
                        new
                        {
                            Id = new Guid("b2f14c2a-6638-4858-8dd4-f2660a341268"),
                            Description = "Black T-shirt with great quality.",
                            Image = "https://images-na.ssl-images-amazon.com/images/I/61oFHwCIKrL._SLDPMOBCAROUSELAUTOCROP288221_MCnd_AC_SR462,693_.jpg",
                            Name = "T-shirt Supercar",
                            Price = 18.99m
                        },
                        new
                        {
                            Id = new Guid("b8705c32-fea6-4815-a548-c95490991166"),
                            Description = "Blue Cap with great quality.",
                            Image = "https://cdn.shopify.com/s/files/1/1435/8030/products/LB17CAP2BL_Lamborghini_Blue_Cap_1.jpg?v=1657622166&width=533",
                            Name = "Cap Lamborghini",
                            Price = 43.99m
                        },
                        new
                        {
                            Id = new Guid("2566d51f-7ac6-4c72-9d32-0ab4eadbbdf5"),
                            Description = "Red Jacket with great quality.",
                            Image = "https://shopf1apparel.com/cdn/shop/products/Hd360c9d9c1a64a089d0f91a3266b17f0d.jpg?v=1630395464",
                            Name = "Jacket Ferrari",
                            Price = 89.99m
                        });
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.ShopCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ShopCarts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88856b35-f932-4a23-9baf-2a8974418b22"),
                            UserId = new Guid("2c5628be-a8ca-4cf0-bc0d-c441e6aa0c6e")
                        },
                        new
                        {
                            Id = new Guid("61be485b-f019-4fd6-9c43-07f5aa896895"),
                            UserId = new Guid("993dc891-f1ee-4b53-984d-3a019f294bfd")
                        },
                        new
                        {
                            Id = new Guid("1bca46f0-2eb4-43c7-8a76-7b006ceb109a"),
                            UserId = new Guid("bcbd7654-ab17-4621-b75b-fc43ea4449db")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.ShopCart", "ShoppingCart")
                        .WithOne("User")
                        .HasForeignKey("MegaCarsSystem.Data.Models.ApplicationUser", "ShoppingCartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Car", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MegaCarsSystem.Data.Models.Dealer", "Dealer")
                        .WithMany("OwnedCars")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MegaCarsSystem.Data.Models.Engine", "Engine")
                        .WithMany("Cars")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MegaCarsSystem.Data.Models.Gearbox", "Gearbox")
                        .WithMany("Cars")
                        .HasForeignKey("GearboxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MegaCarsSystem.Data.Models.ApplicationUser", "Renter")
                        .WithMany("RentedCars")
                        .HasForeignKey("RenterId");

                    b.Navigation("Category");

                    b.Navigation("Dealer");

                    b.Navigation("Engine");

                    b.Navigation("Gearbox");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Dealer", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Item", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.ShopCart", "ShopCart")
                        .WithMany("Items")
                        .HasForeignKey("ShopCartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ShopCart");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Order", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MegaCarsSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MegaCarsSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("RentedCars");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Category", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Dealer", b =>
                {
                    b.Navigation("OwnedCars");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Engine", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.Gearbox", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("MegaCarsSystem.Data.Models.ShopCart", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
